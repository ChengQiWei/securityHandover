/*
 * Copyright (C) 2007 IAIK, Graz University of Technology
 * authors: Thomas Winkler
 */

package iaik.tc.tss.api.structs.tcs;


import iaik.tc.tss.api.structs.common.TcBlobData;
import iaik.tc.tss.api.structs.common.TcCompositeTypeDecoder;
import iaik.tc.tss.api.structs.tpm.TcTpmAuthdata;
import iaik.tc.tss.api.structs.tpm.TcTpmNonce;
import iaik.tc.utils.misc.Utils;

public class TcTcsAuth extends TcCompositeTypeDecoder {

	/**
	 * The auth handle representing the auth session in the TPM.
	 */
	protected long authHandle_;

	
	/**
	 * Nonce even generated by the TPM.
	 */
	protected TcTpmNonce nonceOdd_;  // system

	
	/**
	 * Nonce even generated by the TPM.
	 */
	protected TcTpmNonce nonceEven_;  // TPM

	/**
	 * Flag indicating if the auth session is to be continued.
	 */
	protected boolean contAuthSession_;


	/**
	 * HMACed authorization data.
	 */
	protected TcTpmAuthdata hmac_;
	

	/*************************************************************************************************
	 * Constructor - see superclass for details
	 * 
	 * @see iaik.tc.tss.api.structs.common.TcCompositeTypeDecoder#TcCompositeTypeDecoder()
	 */
	public TcTcsAuth()
	{
		super();
	}


	/*************************************************************************************************
	 * Constructor - see superclass for details
	 * 
	 * @see iaik.tc.tss.api.structs.common.TcCompositeTypeDecoder#TcCompositeTypeDecoder(iaik.tc.tss.api.structs.common.TcBlobData)
	 */
	public TcTcsAuth(TcBlobData data)
	{
		super(data);
	}


	/*************************************************************************************************
	 * Constructor - see superclass for details
	 * 
	 * @see iaik.tc.tss.api.structs.common.TcCompositeTypeDecoder#TcCompositeTypeDecoder(iaik.tc.tss.api.structs.common.TcBlobData,
	 *      int)
	 */
	public TcTcsAuth(TcBlobData data, int offset)
	{
		super(data, offset);
	}


	/*************************************************************************************************
	 * Constructor - see superclass for details
	 * 
	 * @see iaik.tc.tss.api.structs.common.TcCompositeTypeDecoder#TcCompositeTypeDecoder(iaik.tc.tss.api.structs.common.TcCompositeTypeDecoder)
	 */
	public TcTcsAuth(TcCompositeTypeDecoder composite)
	{
		super(composite);
	}


	/*************************************************************************************************
	 * This method decodes the TPM_AUTH from the byte blob.
	 */
	protected void decode()
	{
		checkBoundaryPreconditions(4 + 2 * 20 + 1 + 20);

		authHandle_ = decodeUINT32();
		nonceOdd_ = new TcTpmNonce(this);
		nonceEven_ = new TcTpmNonce(this);
		contAuthSession_ = decodeBoolean();
		hmac_ = new TcTpmAuthdata(this);
	}


	/*************************************************************************************************
	 * This method encodes the TPM_AUTH as a byte blob.
	 */
	public TcBlobData getEncoded()
	{
		TcBlobData retVal = TcBlobData.newUINT32(authHandle_);
		retVal.append(nonceOdd_.getEncoded());
		retVal.append(nonceEven_.getEncoded());
		retVal.append(TcBlobData.newBYTE(Utils.booleanToByte(contAuthSession_)));
		retVal.append(hmac_.getEncoded());
		
		return retVal;
	}


	/*************************************************************************************************
	 * This method returns a String representation of the object.
	 */
	public String toString()
	{
		StringBuffer retVal = new StringBuffer();

		retVal.append("authHandle: ");
		retVal.append(Utils.longToHex(authHandle_));
		retVal.append(Utils.getNL());
		retVal.append("nonceOdd: ");
		if (nonceOdd_ != null) {
			retVal.append(nonceOdd_.toString());
		}
		retVal.append(Utils.getNL());
		retVal.append("nonceEven: ");
		if (nonceEven_ != null) {
			retVal.append(nonceEven_.toString());
		}
		retVal.append(Utils.getNL());
		retVal.append("contAuthSession: ");
		retVal.append(contAuthSession_);
		retVal.append(Utils.getNL());
		retVal.append("hmac: ");
		if (hmac_ != null) {
			retVal.append(hmac_.toString());
		}
		retVal.append(Utils.getNL());

		return retVal.toString();
	}


	/*************************************************************************************************
	 * This method returns the content of the authHandle field.
	 */
	public long getAuthHandle()
	{
		return authHandle_;
	}


	/*************************************************************************************************
	 * This method sets the content of the authHandle field.
	 */
	public void setAuthHandle(long authHandle)
	{
		authHandle_ = authHandle;
	}


	/*************************************************************************************************
	 * This method returns the content of the contAuthSession field.
	 */
	public boolean getContAuthSession()
	{
		return contAuthSession_;
	}


	/*************************************************************************************************
	 * This method sets the content of the contAuthSession field.
	 */
	public void setContAuthSession(boolean contAuthSession)
	{
		contAuthSession_ = contAuthSession;
	}


	/*************************************************************************************************
	 * This method returns the content of the hmac field.
	 */
	public TcTpmAuthdata getHmac()
	{
		return hmac_;
	}


	/*************************************************************************************************
	 * This method sets the content of the hmac field.
	 */
	public void setHmac(TcTpmAuthdata hmac)
	{
		hmac_ = hmac;
	}


	/*************************************************************************************************
	 * This method returns the content of the nonceEven field.
	 */
	public TcTpmNonce getNonceEven()
	{
		return nonceEven_;
	}


	/*************************************************************************************************
	 * This method sets the content of the nonceEven field.
	 */
	public void setNonceEven(TcTpmNonce nonceEven)
	{
		nonceEven_ = nonceEven;
	}


	/*************************************************************************************************
	 * This method returns the content of the nonceOdd field.
	 */
	public TcTpmNonce getNonceOdd()
	{
		return nonceOdd_;
	}


	/*************************************************************************************************
	 * This method sets the content of the nonceOdd field.
	 */
	public void setNonceOdd(TcTpmNonce nonceOdd)
	{
		nonceOdd_ = nonceOdd;
	}
}
