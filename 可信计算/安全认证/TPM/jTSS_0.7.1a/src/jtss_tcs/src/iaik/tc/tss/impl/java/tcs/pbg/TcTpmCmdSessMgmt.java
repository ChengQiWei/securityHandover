/*
 * Copyright (C) 2007 IAIK, Graz University of Technology
 * authors: Thomas Winkler
 */

package iaik.tc.tss.impl.java.tcs.pbg;


import iaik.tc.tss.api.constants.tpm.TcTpmConstants;
import iaik.tc.tss.api.constants.tpm.TcTpmOrdinals;
import iaik.tc.tss.api.exceptions.tcs.TcTddlException;
import iaik.tc.tss.api.exceptions.tcs.TcTpmException;
import iaik.tc.tss.api.structs.common.TcBlobData;
import iaik.tc.tss.api.structs.tcs.TcTcsAuth;
import iaik.tc.tss.api.structs.tpm.TcTpmAuthdata;
import iaik.tc.tss.api.structs.tpm.TcTpmContextBlob;
import iaik.tc.tss.api.structs.tpm.TcTpmGenericReturnBlob;
import iaik.tc.tss.api.structs.tpm.TcTpmNonce;
import iaik.tc.tss.api.structs.tpm.TcTpmPubkey;
import iaik.tc.tss.impl.java.tddl.TcIStreamDest;

public class TcTpmCmdSessMgmt extends TcTpmCmdCommon {

	/*************************************************************************************************
	 * 
	 * 
	 * @param dest The destination where the byte stream is written to.
	 * @param inAuth1 Authorization values for first authorization session.
	 * @param keyHandle The handle of a loaded key.
	 * @param pubKey The public key associated with the loaded key
	 * @param bitName The name of the bit to be modified
	 * @param bitValue The value to set the bit to
	 * @param authLastNonceEven Even nonce previously generated by TPM to cover inputs
	 * 
	 * @return The returned Object[] holds the following elements:
	 *         <ul>
	 *         <li> 0 ... TPM return code (Long)
	 *         <li> 1 ... outgoing authorization for session containing new nonceEven (TcTpmAuth)
	 *         </ul>
	 * 
	 * @throws  TcTpmException This exception indicates that a TPM error has occurred. The specific
	 *           error code id held by the exception.
	 * 
	 * @TPM_V2_R101 218
	 */
	public static Object[] TpmKeyControlOwner(TcIStreamDest dest, long keyHandle, TcTpmPubkey pubKey,
			long bitName, boolean bitValue, TcTpmNonce authLastNonceEven, TcTcsAuth inAuth1)
		throws TcTddlException, TcTpmException
	{

		TcBlobData inBlob = blobUINT16(TcTpmConstants.TPM_TAG_RQU_AUTH1_COMMAND);
		inBlob.append(blobUINT32(0)); // paramSize is set later
		inBlob.append(blobUINT32(TcTpmOrdinals.TPM_ORD_KeyControlOwner));
		inBlob.append(blobUINT32(keyHandle));
		inBlob.append(pubKey.getEncoded());
		inBlob.append(blobUINT32(bitName));
		inBlob.append(blobBOOL(bitValue));
		inBlob.append(blobUINT32(inAuth1.getAuthHandle()));
		inBlob.append(authLastNonceEven.getEncoded());
		inBlob.append(inAuth1.getNonceOdd().getEncoded());
		inBlob.append(blobBOOL(inAuth1.getContAuthSession()));
		inBlob.append(inAuth1.getHmac().getEncoded());

		// all parameters filled in - set the length of the blob
		setParamSize(inBlob);

		// send byte stream
		TcBlobData tpmOutBlob = dest.transmitData(inBlob);
		TcTpmGenericReturnBlob outBlob = new TcTpmGenericReturnBlob(tpmOutBlob);

		// check TPM return code: if call was not successful, an exception is thrown
		try {
			handleRetCode(outBlob);
		} catch (TcTpmException e) {
			invalidataAuthSession(inAuth1);
			throw e;
		}

		// decode 1st output auth
		TcTcsAuth outAuth1 = new TcTcsAuth();
		outAuth1.setAuthHandle(inAuth1.getAuthHandle());
		outAuth1.setNonceOdd(inAuth1.getNonceOdd());
		outAuth1.setNonceEven(new TcTpmNonce(outBlob)); // new nonce even from TPM
		outAuth1.setContAuthSession(outBlob.decodeBoolean());
		outAuth1.setHmac(new TcTpmAuthdata(outBlob));
		trackAuthSession(inAuth1, outAuth1);
		
		return new Object[] { outBlob.getRetCodeAsLong(), outAuth1, };
	}


	/*************************************************************************************************
	 * 
	 * 
	 * @param dest The destination where the byte stream is written to.
	 * @param handle Handle of the resource being saved.
	 * @param resourceType The type of resource that is being saved
	 * @param label Label for identification purposes
	 * 
	 * @return The returned Object[] holds the following elements:
	 *         <ul>
	 *         <li> 0 ... TPM return code (Long)
	 *         <li> 1 ... The context blob (TcTpmContextBlob)
	 *         </ul>
	 * 
	 * @throws  TcTpmException This exception indicates that a TPM error has occurred. The specific
	 *           error code id held by the exception.
	 * 
	 * @TPM_V2_R101 221
	 */
	public static Object[] TpmSaveContext(TcIStreamDest dest, long handle, long resourceType,
			TcBlobData label) throws TcTddlException, TcTpmException
	{

		TcBlobData inBlob = blobUINT16(TcTpmConstants.TPM_TAG_RQU_COMMAND);
		inBlob.append(blobUINT32(0)); // paramSize is set later
		inBlob.append(blobUINT32(TcTpmOrdinals.TPM_ORD_SaveContext));
		inBlob.append(blobUINT32(handle));
		inBlob.append(blobUINT32(resourceType));
		inBlob.append(label);

		// all parameters filled in - set the length of the blob
		setParamSize(inBlob);

		// send byte stream
		TcBlobData tpmOutBlob = dest.transmitData(inBlob);
		TcTpmGenericReturnBlob outBlob = new TcTpmGenericReturnBlob(tpmOutBlob);

		// check TPM return code: if call was not successful, an exception is thrown
		handleRetCode(outBlob);

		// decode output values
		long contextSize = outBlob.decodeUINT32();
		TcBlobData contextBlobRaw = outBlob.decodeBytes(contextSize);
		TcTpmContextBlob contextBlob = new TcTpmContextBlob(contextBlobRaw);

		return new Object[] { outBlob.getRetCodeAsLong(), contextBlob };
	}


	/*************************************************************************************************
	 * 
	 * 
	 * @param dest The destination where the byte stream is written to.
	 * @param entityHandle The handle the TPM MUST use to locate the entity tied to the OSAP/DSAP
	 *          session
	 * @param keepHandle Indication if the handle MUST be preserved
	 * @param contextSz The size of the following context blob.
	 * @param contextBlob The context blob
	 * 
	 * @return The returned Object[] holds the following elements:
	 *         <ul>
	 *         <li> 0 ... TPM return code (Long)
	 *         <li> 1 ... The handle assigned to the resource after it has been successfully loaded.
	 *         (long)
	 *         </ul>
	 * 
	 * @throws  TcTpmException This exception indicates that a TPM error has occurred. The specific
	 *           error code id held by the exception.
	 * 
	 * @TPM_V2_R101 224
	 */
	public static Object[] TpmLoadContext(TcIStreamDest dest, long entityHandle, boolean keepHandle,
			long contextSz, TcTpmContextBlob contextBlob) throws TcTddlException, TcTpmException
	{

		TcBlobData inBlob = blobUINT16(TcTpmConstants.TPM_TAG_RQU_COMMAND);
		inBlob.append(blobUINT32(0)); // paramSize is set later
		inBlob.append(blobUINT32(TcTpmOrdinals.TPM_ORD_LoadContext));
		inBlob.append(blobUINT32(entityHandle));
		inBlob.append(blobBOOL(keepHandle));
		inBlob.append(blobUINT32(contextSz));
		inBlob.append(contextBlob.getEncoded());

		// all parameters filled in - set the length of the blob
		setParamSize(inBlob);

		// send byte stream
		TcBlobData tpmOutBlob = dest.transmitData(inBlob);
		TcTpmGenericReturnBlob outBlob = new TcTpmGenericReturnBlob(tpmOutBlob);

		// check TPM return code: if call was not successful, an exception is thrown
		handleRetCode(outBlob);

		// decode output values
		long handle = outBlob.decodeUINT32();

		return new Object[] { outBlob.getRetCodeAsLong(), new Long(handle) };
	}

}
