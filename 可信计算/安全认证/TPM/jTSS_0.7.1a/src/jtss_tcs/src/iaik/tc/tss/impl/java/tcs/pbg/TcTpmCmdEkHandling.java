/*
 * Copyright (C) 2007 IAIK, Graz University of Technology
 * authors: Thomas Winkler
 */

package iaik.tc.tss.impl.java.tcs.pbg;


import iaik.tc.tss.api.constants.tpm.TcTpmConstants;
import iaik.tc.tss.api.constants.tpm.TcTpmOrdinals;
import iaik.tc.tss.api.exceptions.tcs.TcTddlException;
import iaik.tc.tss.api.exceptions.tcs.TcTpmException;
import iaik.tc.tss.api.structs.common.TcBlobData;
import iaik.tc.tss.api.structs.tcs.TcTcsAuth;
import iaik.tc.tss.api.structs.tpm.TcTpmAuthdata;
import iaik.tc.tss.api.structs.tpm.TcTpmDigest;
import iaik.tc.tss.api.structs.tpm.TcTpmGenericReturnBlob;
import iaik.tc.tss.api.structs.tpm.TcTpmKeyParms;
import iaik.tc.tss.api.structs.tpm.TcTpmNonce;
import iaik.tc.tss.api.structs.tpm.TcTpmPubkey;
import iaik.tc.tss.impl.java.tddl.TcIStreamDest;
import iaik.tc.tss.impl.csp.TcCrypto;

import iaik.tc.utils.logging.Log;
import iaik.tc.utils.misc.Utils;


public class TcTpmCmdEkHandling extends TcTpmCmdCommon {

	/*************************************************************************************************
	 * 
	 * 
	 * @param dest The destination where the byte stream is written to.
	 * @param antiReplay Arbitrary data
	 * @param keyInfo Information about key to be created, this includes all algorithm parameters
	 * 
	 * @return The returned Object[] holds the following elements:
	 *         <ul>
	 *         <li> 0 ... TPM return code (Long)
	 *         <li> 1 ... The public endorsement key (TcTpmPubkey)
	 *         <li> 2 ... Hash of pubEndorsementKey and antiReplay (TcTpmDigest)
	 *         </ul>
	 * 
	 * @throws  TcTpmException This exception indicates that a TPM error has occurred. The specific
	 *           error code id held by the exception.
	 * 
	 * @TPM_V2_R101 139
	 */
	public static Object[] TpmCreateEndorsementKeyPair(TcIStreamDest dest, TcTpmNonce antiReplay,
			TcTpmKeyParms keyInfo) throws TcTddlException, TcTpmException
	{

		TcBlobData inBlob = blobUINT16(TcTpmConstants.TPM_TAG_RQU_COMMAND);
		inBlob.append(blobUINT32(0)); // paramSize is set later
		inBlob.append(blobUINT32(TcTpmOrdinals.TPM_ORD_CreateEndorsementKeyPair));
		inBlob.append(antiReplay.getEncoded());
		inBlob.append(keyInfo.getEncoded());

		// all parameters filled in - set the length of the blob
		setParamSize(inBlob);

		// send byte stream
		TcBlobData tpmOutBlob = dest.transmitData(inBlob);
		TcTpmGenericReturnBlob outBlob = new TcTpmGenericReturnBlob(tpmOutBlob);

		// check TPM return code: if call was not successful, an exception is thrown
		handleRetCode(outBlob);

		// decode output values
		TcTpmPubkey pubEndorsementKey = new TcTpmPubkey(outBlob);
		TcTpmDigest checksum = new TcTpmDigest(outBlob);

		return new Object[] { outBlob.getRetCodeAsLong(), pubEndorsementKey, checksum };
	}


	/*************************************************************************************************
	 * 
	 * 
	 * @param dest The destination where the byte stream is written to.
	 * @param antiReplay Arbitrary data
	 * @param keyInfo Information about key to be created, this includes all algorithm parameters
	 * @param generateReset If TRUE use TPM RNG to generate EKreset. If FALSE use the passed value
	 *          inputEKreset
	 * @param inputEKreset The authorization value to be usedwith TPM_RevokeTrust if
	 *          generateReset==FALSE, else the parameter is present but ignored
	 * 
	 * @return The returned Object[] holds the following elements:
	 *         <ul>
	 *         <li> 0 ... TPM return code (Long)
	 *         <li> 1 ... The public endorsement key (TcTpmPubkey)
	 *         <li> 2 ... Hash of pubEndorsementKey and antiReplay (TcTpmDigest)
	 *         <li> 3 ... The AuthData value to use TPM_RevokeTrust (TcTpmNonce)
	 *         </ul>
	 * 
	 * @throws  TcTpmException This exception indicates that a TPM error has occurred. The specific
	 *           error code id held by the exception.
	 * 
	 * @TPM_V2_R101 141
	 */
	public static Object[] TpmCreateRevocableEK(TcIStreamDest dest, TcTpmNonce antiReplay,
			TcTpmKeyParms keyInfo, boolean generateReset, TcTpmNonce inputEKreset)
		throws TcTddlException, TcTpmException
	{

		TcBlobData inBlob = blobUINT16(TcTpmConstants.TPM_TAG_RQU_COMMAND);
		inBlob.append(blobUINT32(0)); // paramSize is set later
		inBlob.append(blobUINT32(TcTpmOrdinals.TPM_ORD_CreateRevocableEK));
		inBlob.append(antiReplay.getEncoded());
		inBlob.append(keyInfo.getEncoded());
		inBlob.append(blobBOOL(generateReset));
		if (inputEKreset != null) {
			String resetSecretBytes = Utils.byteArrayToHexString(inputEKreset.getNonce().asByteArray(), "", 0);
			Log.info("Reset password hash before TPM call: " + resetSecretBytes);

			inBlob.append(inputEKreset.getEncoded());
		} else {
			Log.info("Reset password hash will be generated by the TPM");

			// parameter must be present but is ignored because generateReset == true
			inBlob.append(TcCrypto.createTcgNonce().getEncoded());
		}

		// all parameters filled in - set the length of the blob
		setParamSize(inBlob);

		// send byte stream
		TcBlobData tpmOutBlob = dest.transmitData(inBlob);
		TcTpmGenericReturnBlob outBlob = new TcTpmGenericReturnBlob(tpmOutBlob);

		// check TPM return code: if call was not successful, an exception is thrown
		handleRetCode(outBlob);

		// decode output values
		TcTpmPubkey pubEndorsementKey = new TcTpmPubkey(outBlob);
		TcTpmDigest checksum = new TcTpmDigest(outBlob);
		TcTpmNonce outputEKreset = new TcTpmNonce(outBlob);

		String resetSecretBytes = Utils.byteArrayToHexString(outputEKreset.getNonce().asByteArray(), "", 0);
		Log.info("Reset password hash returned by the TPM: " + resetSecretBytes);

		return new Object[] { outBlob.getRetCodeAsLong(), pubEndorsementKey, checksum, outputEKreset };
	}


	/*************************************************************************************************
	 * 
	 * 
	 * @param dest The destination where the byte stream is written to.
	 * @param EKReset The value that will be matched toEK Reset
	 * 
	 * @return The returned Object[] holds the following elements:
	 *         <ul>
	 *         <li> 0 ... TPM return code (Long)
	 *         </ul>
	 * 
	 * @throws  TcTpmException This exception indicates that a TPM error has occurred. The specific
	 *           error code id held by the exception.
	 * 
	 * @TPM_V2_R101 143
	 */
	public static Object[] TpmRevokeTrust(TcIStreamDest dest, TcTpmNonce EKReset)
		throws TcTddlException, TcTpmException
	{

		TcBlobData inBlob = blobUINT16(TcTpmConstants.TPM_TAG_RQU_COMMAND);
		inBlob.append(blobUINT32(0)); // paramSize is set later
		inBlob.append(blobUINT32(TcTpmOrdinals.TPM_ORD_RevokeTrust));
		inBlob.append(EKReset.getEncoded());

		// all parameters filled in - set the length of the blob
		setParamSize(inBlob);

		String resetSecretBytes = Utils.byteArrayToHexString(EKReset.getNonce().asByteArray(), "", 0);
		Log.info("Reset password hash before TPM call: " + resetSecretBytes);

		// send byte stream
		TcBlobData tpmOutBlob = dest.transmitData(inBlob);
		TcTpmGenericReturnBlob outBlob = new TcTpmGenericReturnBlob(tpmOutBlob);

		// check TPM return code: if call was not successful, an exception is thrown
		handleRetCode(outBlob);

		return new Object[] { outBlob.getRetCodeAsLong(), };
	}


	/*************************************************************************************************
	 * Return the endorsement key public portion. This value should have controls placed upon access,
	 * as it is a privacy sensitive value. The readPubek flag is set to FALSE by TPM_TakeOwnership and
	 * set to TRUE by TPM_OwnerClear, thus mirroring if a TPM Owner is present.
	 * 
	 * @param dest The destination where the byte stream is written to.
	 * @param antiReplay Arbitrary data
	 * 
	 * @return The returned Object[] holds the following elements:
	 *         <ul>
	 *         <li> 0 ... TPM return code (Long)
	 *         <li> 1 ... The public endorsement key (TcTpmPubkey)
	 *         <li> 2 ... Hash of pubEndorsementKey and antiReplay (TcTpmDigest)
	 *         </ul>
	 * 
	 * @throws  TcTpmException This exception indicates that a TPM error has occurred. The specific
	 *           error code id held by the exception.
	 * 
	 * @TPM_V2_R101 144
	 */
	public static Object[] TpmReadPubek(TcIStreamDest dest, TcTpmNonce antiReplay)
		throws TcTddlException, TcTpmException
	{

		TcBlobData inBlob = blobUINT16(TcTpmConstants.TPM_TAG_RQU_COMMAND);
		inBlob.append(blobUINT32(0)); // paramSize is set later
		inBlob.append(blobUINT32(TcTpmOrdinals.TPM_ORD_ReadPubek));
		inBlob.append(antiReplay.getEncoded());

		// all parameters filled in - set the length of the blob
		setParamSize(inBlob);

		// send byte stream
		TcBlobData tpmOutBlob = dest.transmitData(inBlob);
		TcTpmGenericReturnBlob outBlob = new TcTpmGenericReturnBlob(tpmOutBlob);

		// check TPM return code: if call was not successful, an exception is thrown
		handleRetCode(outBlob);

		// decode output values
		TcTpmPubkey pubEndorsementKey = new TcTpmPubkey(outBlob);
		TcTpmDigest checksum = new TcTpmDigest(outBlob);

		return new Object[] { outBlob.getRetCodeAsLong(), pubEndorsementKey, checksum };
	}


	/*************************************************************************************************
	 * 
	 * 
	 * @param dest The destination where the byte stream is written to.
	 * @param inAuth1 Authorization values for first authorization session.
	 * @param keyHandle Handle for either PUBEK or SRK
	 * 
	 * @return The returned Object[] holds the following elements:
	 *         <ul>
	 *         <li> 0 ... TPM return code (Long)
	 *         <li> 1 ... outgoing authorization for session containing new nonceEven (TcTpmAuth)
	 *         <li> 2 ... The public portion of the requested key (TcTpmPubkey)
	 *         </ul>
	 * 
	 * @throws  TcTpmException This exception indicates that a TPM error has occurred. The specific
	 *           error code id held by the exception.
	 * 
	 * @TPM_V2_R101 145
	 */
	public static Object[] TpmOwnerReadInternalPub(TcIStreamDest dest, long keyHandle,
			TcTcsAuth inAuth1) throws TcTddlException, TcTpmException
	{

		TcBlobData inBlob = blobUINT16(TcTpmConstants.TPM_TAG_RQU_AUTH1_COMMAND);
		inBlob.append(blobUINT32(0)); // paramSize is set later
		inBlob.append(blobUINT32(TcTpmOrdinals.TPM_ORD_OwnerReadInternalPub));
		inBlob.append(blobUINT32(keyHandle));
		inBlob.append(blobUINT32(inAuth1.getAuthHandle()));
		inBlob.append(inAuth1.getNonceOdd().getEncoded());
		inBlob.append(blobBOOL(inAuth1.getContAuthSession()));
		inBlob.append(inAuth1.getHmac().getEncoded());

		// all parameters filled in - set the length of the blob
		setParamSize(inBlob);

		// send byte stream
		TcBlobData tpmOutBlob = dest.transmitData(inBlob);
		TcTpmGenericReturnBlob outBlob = new TcTpmGenericReturnBlob(tpmOutBlob);

		// check TPM return code: if call was not successful, an exception is thrown
		try {
			handleRetCode(outBlob);
		} catch (TcTpmException e) {
			invalidataAuthSession(inAuth1);
			throw e;
		}

		// decode output values
		TcTpmPubkey publicPortion = new TcTpmPubkey(outBlob);

		// decode 1st output auth
		TcTcsAuth outAuth1 = new TcTcsAuth();
		outAuth1.setAuthHandle(inAuth1.getAuthHandle());
		outAuth1.setNonceOdd(inAuth1.getNonceOdd());
		outAuth1.setNonceEven(new TcTpmNonce(outBlob)); // new nonce even from TPM
		outAuth1.setContAuthSession(outBlob.decodeBoolean());
		outAuth1.setHmac(new TcTpmAuthdata(outBlob));
		trackAuthSession(inAuth1, outAuth1);

		return new Object[] { outBlob.getRetCodeAsLong(), outAuth1, publicPortion };
	}
}
